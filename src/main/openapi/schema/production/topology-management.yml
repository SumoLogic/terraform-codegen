paths:
  # /topologies endpoint
  topologies:
    get:
      summary: Get all topologies.
      description: Get all topologies in the organization.
      operationId: listTopologies
      tags:
        - topologyManagement
      responses:
        200:
          description: Topology objects that were requested.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TopologyList'
        default:
          description: Operation failed with an error.
          content:
            application/json:
              schema:
                $ref: './generic-responses.yml#/components/schemas/ErrorResponse'
    post:
      summary: Create a new topology.
      description: Create a new topology in the organization.
      operationId: createTopology
      tags:
        - topologyManagement
      requestBody:
        description: Information to create the new topology.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TopologyDefinition'
      responses:
        200:
          description: The topology was successfully created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Topology'
        default:
          description: Operation failed with an error.
          content:
            application/json:
              schema:
                $ref: './generic-responses.yml#/components/schemas/ErrorResponse'
  # /topologies/{id} endpoint
  topologyId:
    get:
      summary: Get a topology by id.
      description: Get a topology by id.
      operationId: getTopology
      tags:
        - topologyManagement
      parameters:
        - name: id
          description: Unique id of the topology to return.
          required: true
          in: path
          schema:
            type: string
      responses:
        200:
          description: The topology object that was requested.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Topology'
        default:
          description: Operation failed with an error.
          content:
            application/json:
              schema:
                $ref: './generic-responses.yml#/components/schemas/ErrorResponse'
    put:
      summary: Update a topology by id.
      description: Update a topology by id.
      operationId: updateTopology
      tags:
        - topologyManagement
      parameters:
        - name: id
          description: Unique id of the topology to update.
          required: true
          in: path
          schema:
            type: string
      requestBody:
        description: Information to update for the topology.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TopologyDefinition'
      responses:
        200:
          description: The topology was successfully modified.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Topology'
        default:
          description: Operation failed with an error.
          content:
            application/json:
              schema:
                $ref: './generic-responses.yml#/components/schemas/ErrorResponse'
    delete:
      summary: Delete a topology.
      description: Delete a topology by id.
      operationId: deleteTopology
      tags:
        - topologyManagement
      parameters:
        - name: id
          description: Id of topology to delete.
          required: true
          in: path
          schema:
            type: string
      responses:
        204:
          description: The topology was successfully deleted.
        default:
          description: Operation failed with an error.
          content:
            application/json:
              schema:
                $ref: './generic-responses.yml#/components/schemas/ErrorResponse'

components:
  schemas:
    TopologyList:
      type: array
      description: List of topology.
      items:
        $ref: '#/components/schemas/Topology'
    HierarchyField:
      type: object
      description: A field in the hierachy.
      required:
        - metadataKey
      properties:
        metadataKey:
          description: Key to filter for in the metadata catalog search.
          type: string
    BaseFilterField:
      type: object
      description: A field in the base filter.
      required:
        - key
        - value
      properties:
        key:
          description: Key to filter for in the metadata catalog.
          type: string
        value:
          description: Value for the key in the metadata catalog.
          type: string
    TopologyDefinition:
      type: object
      description: A topology of related content grouped as a hierarchy.
      required:
        - name
        - baseFilter
        - hierarchy
      properties:
        name:
          description: Name of the topology.
          type: string
        baseFilter:
          description: Filter that will be applied to all items in the topology upon a metadata catalog search.
          type: array
          items:
            description: A field in the base filter of the topology
            $ref: '#/components/schemas/BaseFilterField'
        hierarchy:
          description: A hierarchy of the fields in the topology, represented by an array. The order is read from left to right in the array.
          type: array
          items:
            description: A field in the hierachy of the topology.
            $ref: '#/components/schemas/HierarchyField'
    Topology:
      allOf:
        - $ref: '#/components/schemas/TopologyDefinition'
        - type: object
          description: Topology object with ID.
          required:
            - id
          properties:
            id:
              description: Unique identifier for the topology.
              type: string
