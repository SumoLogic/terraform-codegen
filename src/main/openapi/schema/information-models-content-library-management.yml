paths:
  informationModels:
    root:
      get:
        summary: Get the root folder in the library.
        description: >
          Get the root folder in the library.
        operationId: getInformationModelsLibraryRoot
        tags:
          - informationModelsLibraryManagement
        responses:
          200:
            description: Root folder in the library.
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/InformationModelsLibraryFolderResponse'
          default:
            description: Operation failed with an error.
            content:
              application/json:
                schema:
                  $ref: './generic-responses.yml#/components/schemas/ErrorResponse'
    post:
      summary: >
        Create a folder or model.
      description: >
        Create a folder or model.
      operationId: informationModelsCreate
      tags:
        - informationModelsLibraryManagement
      parameters:
        - name: parentId
          description: Identifier of the parent folder in which to create the folder or model.
          required: true
          in: query
          schema:
            type: string
      requestBody:
        description: The folder or model to be created.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InformationModelsLibraryBase'
      responses:
        200:
          description: Newly created folder or model.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InformationModelsLibraryBaseResponse'
        default:
          description: Operation failed with an error.
          content:
            application/json:
              schema:
                $ref: './generic-responses.yml#/components/schemas/ErrorResponse'
    get:
      summary: Bulk read folders and models.
      description: >
        Bulk read folders and models by the given identifiers from the library.
      operationId: informationModelsReadByIds
      tags:
        - informationModelsLibraryManagement
      parameters:
        - name: ids
          description: A comma-separated list of identifiers.
          required: true
          in: query
          schema:
            type: array
            items:
              type: string
          example: 0000000000000001,0000000000000002,0000000000000003
      responses:
        200:
          description: A map between an identifier and its definition (folder or model).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdToInformationModelsLibraryBaseResponseMap'
        default:
          description: Operation failed with an error.
          content:
            application/json:
              schema:
                $ref: './generic-responses.yml#/components/schemas/ErrorResponse'

    delete:
      summary: >
        Bulk delete folders and models.
      description: >
        Bulk delete folders and models by the given identifiers from the library.
      operationId: informationModelsDeleteByIds
      tags:
        - informationModelsLibraryManagement
      parameters:
        - name: ids
          description: A comma-separated list of identifiers.
          required: true
          in: query
          schema:
            type: array
            items:
              type: string
          example: 0000000000000001,0000000000000002,0000000000000003
      responses:
        200:
          description: A map between the deleted identifier and its meta data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdToInformationModelsLibraryBaseResponseMap'
        default:
          description: Operation failed with an error.
          content:
            application/json:
              schema:
                $ref: './generic-responses.yml#/components/schemas/ErrorResponse'
    path:
      get:
        summary: Read a folder or model by its path.
        description: >
          Read a folder or model by its path.
        operationId: modelsGetByPath
        tags:
          - informationModelsLibraryManagement
        parameters:
          - name: path
            description: The path of the folder or model.
            required: true
            in: query
            schema:
              type: string
        responses:
          200:
            description: Requested folder or model.
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/InformationModelsLibraryBaseResponse'
          default:
            description: Operation failed with an error.
            content:
              application/json:
                schema:
                  $ref: './generic-responses.yml#/components/schemas/ErrorResponse'
    search:
      get:
        summary: Search for folders or models.
        description: >-
          Search for a folder or model in the cloud SIEM models library structure.
        operationId: informationModelsSearch
        tags:
          - informationModelsLibraryManagement
        parameters:
          - name: query
            description: >-
              The search query to find folder or models. Below is the list of different filters with examples:
                - **createdBy** : Filter by the user's identifier who created the content. Example: `createdBy:000000000000968B`.
                - **createdBefore** : Filter by the content objects created before the given timestamp(in milliseconds). Example: `createdBefore:1457997222`.
                - **createdAfter** : Filter by the content objects created after the given timestamp(in milliseconds). Example: `createdAfter:1457997111`.
                - **modifiedBefore** : Filter by the content objects modified before the given timestamp(in milliseconds). Example: `modifiedBefore:1457997222`.
                - **modifiedAfter** : Filter by the content objects modified after the given timestamp(in milliseconds). Example: `modifiedAfter:1457997111`.
                - **type** : Filter by the type of the content object. Example: `type:folder`.
              You can also use multiple filters in one query. For example to search for all content objects created by user with identifier 000000000000968B with creation timestamp after 1457997222 containing the text Test, the query would look like:
                `createdBy:000000000000968B createdAfter:1457997222 Test`
            required: true
            in: query
            schema:
              type: string
              example: "createdBy:000000000000968B Test"
          - name: limit
            description: Maximum number of items you want in the response.
            required: false
            in: query
            schema:
              type: integer
              format: int32
              example: 10
              default: 100
          - name: offset
            description: The position or row from where to start the search operation.
            required: false
            in: query
            schema:
              type: integer
              format: int32
              example: 5
              default: 0
        responses:
          200:
            description: List of folders and models matching the search query.
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ListInformationModelsLibraryItemWithPath'
          default:
            description: Operation failed with an error.
            content:
              application/json:
                schema:
                  $ref: './generic-responses.yml#/components/schemas/ErrorResponse'

  informationModelId:
    put:
      summary: >
        Update a folder or model.
      description: >
        Update a folder or model.
      operationId: informationModelsUpdateById
      tags:
        - informationModelsLibraryManagement
      parameters:
        - name: id
          description: Identifier of the folder or model to update.
          required: true
          in: path
          schema:
            type: string
      requestBody:
        description: >
          The folder or model to be updated. Content version must match its latest version number in the library.
          Any staled version will not be updated.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InformationModelsLibraryBaseUpdate'
      responses:
        200:
          description: Updated folder or model.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InformationModelsLibraryBaseResponse'
        default:
          description: Operation failed with an error.
          content:
            application/json:
              schema:
                $ref: './generic-responses.yml#/components/schemas/ErrorResponse'

    get:
      summary: Read a folder or model.
      description: >
        Read a folder or model.
      operationId: informationModelsReadById
      tags:
        - informationModelsLibraryManagement
      parameters:
        - name: id
          description: Identifier of the folder or model to read.
          required: true
          in: path
          schema:
            type: string
      responses:
        200:
          description: Requested folder or model.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InformationModelsLibraryBaseResponse'
        default:
          description: Operation failed with an error.
          content:
            application/json:
              schema:
                $ref: './generic-responses.yml#/components/schemas/ErrorResponse'

    delete:
      summary: >
        Delete a folder or model.
      description: >
        Delete a folder or model.
      operationId: informationModelsDeleteById
      tags:
        - informationModelsLibraryManagement
      parameters:
        - name: id
          description: Identifier of the folder or model to delete.
          required: true
          in: path
          schema:
            type: string
      responses:
        204:
          description: The folder or information model was successfully deleted.
        default:
          description: Operation failed with an error.
          content:
            application/json:
              schema:
                $ref: './generic-responses.yml#/components/schemas/ErrorResponse'

    unlock:
      post:
        summary: Unlock a folder or model.
        description: >
          Unlocking requires the `LockModels` capability.
          It is only possible to unlock the highest locked object in a tree of locked objects.
          Unlocking recursively unlocks all of the objects children.
        operationId: informationModelsUnlockById
        tags:
          - informationModelsLibraryManagement
        parameters:
          - name: id
            description: The id of the folder or model that needs to be unlocked.
            required: true
            in: path
            schema:
              type: string
        responses:
          200:
            description: Updated folder or model.
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/InformationModelsLibraryBaseResponse'
          default:
            description: Operation failed with an error.
            content:
              application/json:
                schema:
                  $ref: './generic-responses.yml#/components/schemas/ErrorResponse'

    lock:
      post:
        summary: Lock a folder or model.
        description: >
          Locking requires the `LockModels` capability.
          When an object is locked, it can't be moved or deleted and only the local fields can be modified.
          Locking recursively locks all of the objects children.
        operationId: informationModelsLockById
        tags:
          - informationModelsLibraryManagement
        parameters:
          - name: id
            description: The id of the folder or model that needs to be locked.
            required: true
            in: path
            schema:
              type: string
        responses:
          200:
            description: Updated folder or model.
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/InformationModelsLibraryBaseResponse'
          default:
            description: Operation failed with an error.
            content:
              application/json:
                schema:
                  $ref: './generic-responses.yml#/components/schemas/ErrorResponse'

    path:
      get:
        summary: Get full path of folder or model.
        description: >
          Get full path of folder or model.
        operationId: getInformationModelsFullPath
        tags:
          - informationModelsLibraryManagement
        parameters:
          - name: id
            description: Identifier of the folder or model.
            required: true
            in: path
            schema:
              type: string
        responses:
          200:
            description: Full path of the folder or model.
            content:
              application/json:
                schema:
                  $ref: './content-library-models.yml#/components/schemas/Path'
          default:
            description: Operation failed with an error.
            content:
              application/json:
                schema:
                  $ref: './generic-responses.yml#/components/schemas/ErrorResponse'

    move:
      post:
        summary: Move a folder or model.
        description: >
          Move a folder or model.
        operationId: informationModelsMove
        tags:
          - informationModelsLibraryManagement
        parameters:
          - name: id
            description: Identifier of the folder or model to move.
            required: true
            in: path
            schema:
              type: string
          - name: parentId
            description: Identifier of the parent folder to move the folder or model to.
            required: true
            in: query
            schema:
              type: string
        responses:
          200:
            description: Moved folder or model.
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/InformationModelsLibraryBaseResponse'
          default:
            description: Operation failed with an error.
            content:
              application/json:
                schema:
                  $ref: './generic-responses.yml#/components/schemas/ErrorResponse'

    copy:
      post:
        summary: Copy a folder or model.
        description: >
          Copy a folder or model.
        operationId: informationModelsCopy
        tags:
          - informationModelsLibraryManagement
        parameters:
          - name: id
            description: Identifier of the folder or model to copy.
            required: true
            in: path
            schema:
              type: string
        requestBody:
          description: >
            Fields include:
              1) Identifier of the parent folder to copy to.
              2) Optionally provide a new name.
              3) Optionally provide a new description.
              4) Optionally set to true if you want to copy and preserved the locked status. Requires `LockModels` capability.
          required: true
          content:
            application/json:
              schema:
                $ref: './content-library-models.yml#/components/schemas/ContentCopyParams'
        responses:
          200:
            description: Newly copied folder or model.
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/InformationModelsLibraryBaseResponse'
          default:
            description: Operation failed with an error.
            content:
              application/json:
                schema:
                  $ref: './generic-responses.yml#/components/schemas/ErrorResponse'
    export:
      get:
        summary: Export a folder or informationModel.
        description: Export a folder or informationModel.
        operationId: informationModelsExportItem
        tags:
          - informationModelsLibraryManagement
        parameters:
          - name: id
            description: Identifier of the folder or informationModel to export.
            required: true
            in: path
            schema:
              type: string
          - name: preserveLock
            description: >
              Set this to true if you want to export an object and preserve the locked status.
            required: false
            in: query
            schema:
              type: boolean
              default: false
        responses:
          200:
            description: Exported folder or informationModel
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/InformationModelsLibraryExportBase'
          default:
            description: Operation failed with an error.
            content:
              application/json:
                schema:
                  $ref: './generic-responses.yml#/components/schemas/ErrorResponse'

    import:
      post:
        summary: Import a folder or informationModel
        description: >
          Import a folder or informationModel
        operationId: informationModelsImportItem
        tags:
          - informationModelsLibraryManagement
        parameters:
          - name: parentId
            description: Identifier of the parent folder in which to import the folder or informationModel.
            required: true
            in: path
            schema:
              type: string
        requestBody:
          description: >
            The folder or informationModel to be imported.
          required: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InformationModelsLibraryExportBase'
        responses:
          200:
            description: Newly imported folder or informationModel.
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/InformationModelsLibraryBaseResponse'
          default:
            description: Operation failed with an error.
            content:
              application/json:
                schema:
                  $ref: './generic-responses.yml#/components/schemas/ErrorResponse'
components:
  schemas:
    InformationModelsLibraryBase:
      type: object
      discriminator:
        propertyName:
          type
      required:
        - name
        - description
        - type
      properties:
        name:
          description: Name of the folder or model.
          type: string
          minLength: 1
          maxLength: 255
        description:
          description: Description of the folder or model.
          type: string
          maxLength: 4096
        type:
          description: >
            Type of the object model.
            Valid values:
              1) InformationModelsLibraryFolder
              2) InformationModelsLibraryModel
          type: string
        isLocked:
          description: >-
            Locking/Unlocking requires the `LockModels` capability.
            Locked objects can only be `Localized`. Updating or moving requires unlocking the object.
            Locking/Unlocking recursively locks all of the objects children.
            All children of a locked object must be locked.
          type: boolean
          default: false
    ListInformationModelsLibraryItemWithPath:
      description: List of folders or models.
      type: array
      items:
        $ref: '#/components/schemas/InformationModelsLibraryItemWithPath'

    InformationModelsLibraryItemWithPath:
      type: object
      required:
        - item
        - path
      properties:
        item:
          description: Folder or model.
          $ref: '#/components/schemas/InformationModelsLibraryBaseResponse'
        path:
          description: Path of the folder or model.
          type: string
          example: "/InformationModels/SampleFolder/TestModel"

    InformationModelDetails:
      description: Details of the model.
      type: object
      required:
        - modelFields
      properties:
        parentModel:
          description: ID of the parent model, or null if no parent is supplied.
          type: string
        modelFactors:
          description: factors used for the model
          type: array
          items:
            type: object
            required:
              - factorType
              - fields
            properties:
              factorType:
                description: type of factor.
                type: string
              label:
                description: label of factor.
                type: string
              fields:
                description: fields of factor.
                type: string
              requiredFields:
                description: required fields of factor.
                type: string
        modelFields:
          description: fields defined in the model
          type: array
          minItems: 1
          items:
            type: object
            required:
              - fieldName
            properties:
              fieldName:
                description: name of field.
                type: string
                minLength: 1
                pattern: '^(?!true$|false$).*$'
                x-pattern-message: "fieldName cannot be a reserved keyword ('true' or 'false')."
              fieldType:
                description: type of field.
                type: string
              default:
                description: default value of field.
                type: string
    InformationModelsLibraryModel:
      allOf:
        - $ref: '#/components/schemas/InformationModelsLibraryBase'
        - type: object
          required:
            - modelDetails
          properties:
            modelDetails:
              $ref: '#/components/schemas/InformationModelDetails'

    InformationModelsLibraryFolder:
      allOf:
        - $ref: '#/components/schemas/InformationModelsLibraryBase'

    InformationModelsLibraryBaseUpdate:
      type: object
      discriminator:
        propertyName:
          type
      # NOTE(vishal, 2019-04-01) Repeating InformationModelsLibraryBase properties here. Our documentation tool
      # break with allOf and discriminator in same object.
      required:
        - name
        - description
        - version
        - type
      properties:
        name:
          description: Name of the folder or model.
          type: string
          minLength: 1
          maxLength: 255
        description:
          description: Description of the folder or model.
          type: string
          maxLength: 4096
        version:
          description: Version of the folder or model.
          type: integer
          format: int64
        type:
          description: >
            Type of the object model.
            Valid values:
              1) InformationModelsLibraryFolderUpdate
              2) InformationModelsLibraryModelUpdate
          type: string

    InformationModelsLibraryModelUpdate:
      allOf:
        - $ref: '#/components/schemas/InformationModelsLibraryBaseUpdate'
        - type: object
          required:
            - modelDetails
          properties:
            modelDetails:
              $ref: '#/components/schemas/InformationModelDetails'
    InformationModelsLibraryFolderUpdate:
      allOf:
        - $ref: '#/components/schemas/InformationModelsLibraryBaseUpdate'

    InformationModelsLibraryBaseResponse:
      type: object
      discriminator:
        propertyName:
          type
      required:
        - id
        - name
        - description
        - version
        # NOTE(vishal, 2019-04-01) Don't refer to MetadataModel. Don't know why but it
        # breaks documentation.
        - createdAt
        - createdBy
        - modifiedAt
        - modifiedBy
        - parentId
        - contentType
        - type
        - isLocked
        - isSystem
        - isMutable
      properties:
        id:
          description: Identifier of the folder or model.
          type: string
        name:
          description: Name of the folder or model.
          type: string
        description:
          description: Description of the folder or model.
          type: string
        version:
          description: Version of the folder or model.
          type: integer
          format: int64
        createdAt:
          description: >
            Creation timestamp in UTC in [RFC3339](https://tools.ietf.org/html/rfc3339) format.
          type: string
          format: date-time
        createdBy:
          description: Identifier of the user who created the resource.
          type: string
        modifiedAt:
          description: Last modification timestamp in UTC.
          type: string
          format: date-time
        modifiedBy:
          description: Identifier of the user who last modified the resource.
          type: string
        parentId:
          description: Identifier of the parent folder.
          type: string
        contentType:
          description: >
            Type of the content.
            Valid values:
              1) Folder
              2) Model
          type: string
        type:
          description: Type of the object model.
          type: string
        isLocked:
          description: Whether the object is locked.
          type: boolean
        isSystem:
          description: >-
            System objects are objects provided by Sumo Logic.
            System objects can only be localized. Non-local fields can't be updated.
          type: boolean
        isMutable:
          description: >-
            Immutable objects are "READ-ONLY".
          type: boolean

    InformationModelsLibraryModelResponse:
      allOf:
        - $ref: '#/components/schemas/InformationModelsLibraryBaseResponse'
        - type: object
          required:
            - modelDetails
          properties:
            modelDetails:
              $ref: '#/components/schemas/InformationModelDetails'

    InformationModelsLibraryFolderResponse:
      allOf:
        - $ref: '#/components/schemas/InformationModelsLibraryBaseResponse'
        - type: object
          required:
            - children
          properties:
            children:
              description: Children of the folder.
              type: array
              items:
                $ref: '#/components/schemas/InformationModelsLibraryBaseResponse'

    IdToInformationModelsLibraryBaseResponseMap:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/InformationModelsLibraryBaseResponse'

    InformationModelsLibraryExportBase:
      type: object
      discriminator:
        propertyName:
          type
      required:
        - name
        - description
        - type
      properties:
        name:
          description: Name of the folder or informationModels.
          type: string
          minLength: 1
          maxLength: 255
        description:
          description: Description of the folder or informationModels.
          type: string
          maxLength: 4096
        type:
          description: Type of the object model.
          type: string

    InformationModelsLibraryInformationModelExport:
      allOf:
        - $ref: '#/components/schemas/InformationModelsLibraryExportBase'
        - type: object
          required:
            - modelDetails
          properties:
            modelDetails:
              $ref: '#/components/schemas/InformationModelDetails'

    InformationModelsLibraryFolderExport:
      allOf:
        - $ref: '#/components/schemas/InformationModelsLibraryExportBase'
        - type: object
          properties:
            children:
              description: Children of the folder
              type: array
              items:
                $ref: '#/components/schemas/InformationModelsLibraryExportBase'
