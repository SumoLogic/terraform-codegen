package com.sumologic.terraform_generator.writer

import com.sumologic.terraform_generator.objects.SumoSwaggerTemplate

case class SumoProviderGenerator(terraform: SumoSwaggerTemplate)
  extends SumoTerraformFileGenerator(terraform: SumoSwaggerTemplate) {
  def generate(): String = {
    val pre = """// ----------------------------------------------------------------------------
                |//
                |//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
                |//
                |// ----------------------------------------------------------------------------
                |//
                |//     This file is automatically generated by Sumo Logic and manual
                |//     changes will be clobbered when the file is regenerated. Do not submit
                |//     changes to this file.
                |//
                |// ----------------------------------------------------------------------------\
                |package main
                |
                |import (
                |  "fmt"
                |  "github.com/go-errors/errors"
                |  "log"
                |  "os"
                |
                |  "github.com/hashicorp/terraform/helper/mutexkv"
                |  "github.com/hashicorp/terraform/terraform"
                |  "github.com/hashicorp/terraform/helper/schema"
                |)
                |
                |const DefaultEnvironment = "us2"
                |
                |func Provider() terraform.ResourceProvider {
                |	defaultEnvironment := os.Getenv("SUMOLOGIC_ENVIRONMENT")
                |	if defaultEnvironment == "" {
                |		defaultEnvironment = DefaultEnvironment
                |	}
                |	log.Printf("[DEBUG] sumo default environment: %s", defaultEnvironment)
                |
                |	return &schema.Provider{
                |		Schema: map[string]*schema.Schema{
                |			"access_id": {
                |				Type:     schema.TypeString,
                |				Optional: true,
                |				Default:  os.Getenv("SUMOLOGIC_ACCESSID"),
                |			},
                |			"access_key": {
                |				Type:     schema.TypeString,
                |				Optional: true,
                |				Default:  os.Getenv("SUMOLOGIC_ACCESSKEY"),
                |			},
                |			"environment": {
                |				Type:     schema.TypeString,
                |				Optional: true,
                |				Default:  defaultEnvironment,
                |			},
                |		},
                |""".stripMargin

    val post = """    ConfigureFunc: providerConfigure,
                 |	}
                 |}
                 |
                 |var SumoMutexKV = mutexkv.NewMutexKV()
                 |
                 |func providerConfigure(d *schema.ResourceData) (interface{}, error) {
                 |	accessId := d.Get("access_id").(string)
                 |	accessKey := d.Get("access_key").(string)
                 |	environment := d.Get("environment").(string)
                 |
                 |	msg := ""
                 |	if accessId == "" {
                 |		msg = "sumologic provider: access_id should be set;"
                 |	}
                 |	if accessKey == "" {
                 |		msg = fmt.Sprintf("%s access_key should be set; ", msg)
                 |	}
                 |	if msg != "" {
                 |		if environment == DefaultEnvironment {
                 |			msg = fmt.Sprintf("%s make sure environment is set or that the default (%s) is appropriate", msg, DefaultEnvironment)
                 |		}
                 |		return nil, errors.New(msg)
                 |	}
                 |
                 |	return NewClient(
                 |		accessId,
                 |		accessKey,
                 |		environment,
                 |	)
                 |}
                |""".stripMargin

    val className = terraform.getMainObjectClass.name
    val lowerCaseClass = className.toLowerCase


    // TODO: make this a list for all classes
    val resourcesMap = s"""    ResourcesMap: map[string]*schema.Resource{
                         |			"sumologic_$lowerCaseClass":          resourceSumologic$className(),
                         |		},
                         |""".stripMargin

    val dataSourcesMap = s"""    DataSourcesMap: map[string]*schema.Resource{
                          |			"sumologic_$lowerCaseClass":          dataSourceSumologic$className(),
                          |		},
                          |""".stripMargin

    pre + resourcesMap + dataSourcesMap + post
  }
}
