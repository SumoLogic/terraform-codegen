// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Sumo Logic and manual
//     changes will be clobbered when the file is regenerated. Do not submit
//     changes to this file.
//
// ----------------------------------------------------------------------------
package sumologic

import (
	"log"

	"github.com/hashicorp/terraform-plugin-sdk/helper/schema"
)

func resourceSumologicPet() *schema.Resource {
	return &schema.Resource{
		Create: resourceSumologicPetCreate,
		Read:   resourceSumologicPetRead,
		Update: resourceSumologicPetUpdate,
		Delete: resourceSumologicPetDelete,
		Importer: &schema.ResourceImporter{
			State: schema.ImportStatePassthrough,
		},

		Schema: map[string]*schema.Schema{
			"name": {
				Type:     schema.TypeString,
				Required: true,
			},
			"tag": {
				Type:     schema.TypeString,
				Optional: true,
			},
		},
	}
}

func resourceSumologicPetRead(d *schema.ResourceData, meta interface{}) error {
	c := meta.(*Client)

	id := d.Id()
	pet, err := c.GetPet(id)

	if err != nil {
		return err
	}

	if pet == nil {
		log.Printf("[WARN] Pet not found, removing from state: %v - %v", id, err)
		d.SetId("")
		return nil
	}

	d.Set("name", pet.Name)
	d.Set("tag", pet.Tag)

	return nil
}

func resourceSumologicPetDelete(d *schema.ResourceData, meta interface{}) error {
	c := meta.(*Client)
	return c.DeletePet(d.Id())
}

func resourceSumologicPetUpdate(d *schema.ResourceData, meta interface{}) error {
	c := meta.(*Client)

	pet := resourceToPet(d)

	err := c.UpdatePet(pet)
	if err != nil {
		return err
	}

	return resourceSumologicPetRead(d, meta)
}

func resourceSumologicPetCreate(d *schema.ResourceData, meta interface{}) error {
	c := meta.(*Client)

	if d.Id() == "" {
		pet := resourceToPet(d)
		id, err := c.CreatePet(pet)

		if err != nil {
			return err
		}

		d.SetId(id)
	}

	return resourceSumologicPetRead(d, meta)
}


func resourceToPet(d *schema.ResourceData) Pet {
	return Pet{
		Name:       d.Get("name").(string),
		Tag:        d.Get("tag").(string),
		ID:         d.Id(),
	}
}
