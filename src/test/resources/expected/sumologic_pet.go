// ---------- BEGIN Pet ----------

// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Sumo Logic and manual
//     changes will be clobbered when the file is regenerated. Do not submit
//     changes to this file.
//
// ----------------------------------------------------------------------------
package sumologic

import (
	"encoding/json"
	"fmt"
)

// ---------- ENDPOINTS ----------

func (s *Client) GetPet(id string) (*Pet, error) {
    urlWithoutParams := "pets/%s"

    paramString := ""
    sprintfArgs := []interface{}{}
    sprintfArgs = append(sprintfArgs, id)

    urlWithParams := fmt.Sprintf(urlWithoutParams + paramString, sprintfArgs...)

    data, _, err := s.Get(urlWithParams)
	if err != nil {
		return nil, err
	}
	if data == nil {
		return nil, nil
	}

	var pet Pet
	err = json.Unmarshal(data, &pet)
	if err != nil {
		return nil, err
	}
	return &pet, nil
}

func (s *Client) DeletePet(id string) error {
    urlWithoutParams := "pets/%s"

    paramString := ""
    sprintfArgs := []interface{}{}
    sprintfArgs = append(sprintfArgs, id)

    urlWithParams := fmt.Sprintf(urlWithoutParams + paramString, sprintfArgs...)

    _, err := s.Delete(urlWithParams)
	return err
}

func (s *Client) UpdatePet(pet Pet) error {
    urlWithoutParams := "pets/%s"

    paramString := ""
    sprintfArgs := []interface{}{}
    sprintfArgs = append(sprintfArgs, pet.ID)

    urlWithParams := fmt.Sprintf(urlWithoutParams + paramString, sprintfArgs...)

	pet.ID = ""

    _, err := s.Put(urlWithParams, pet)
	return err
}

func (s *Client) CreatePet(pet Pet) (string, error) {
    urlWithoutParams := "pets"

    data, err := s.Post(urlWithoutParams, pet)
	if err != nil {
		return "", err
	}

	var createdPet Pet
	err = json.Unmarshal(data, &createdPet)
	if err != nil {
		return "", err
	}

	return createdPet.ID, nil
}

// ---------- TYPES ----------
type Pet struct {
    Name    string  `json:"name"`
    Tag     string  `json:"tag"`
    ID      string  `json:"id,omitempty"`
}

// ---------- END ----------
