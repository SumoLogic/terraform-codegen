// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Sumo Logic and manual
//     changes will be clobbered when the file is regenerated. Do not submit
//     changes to this file.
//
// ----------------------------------------------------------------------------
package sumologic

import (
	"fmt"
	"testing"
	"strconv"
	"strings"

	"github.com/hashicorp/terraform-plugin-sdk/helper/resource"
	"github.com/hashicorp/terraform-plugin-sdk/terraform"
)

func TestAccSumologicPet_basic(t *testing.T) {
	var pet Pet
	testName := "Rupert"
	testTag := "bear"

	resource.Test(t, resource.TestCase{
		PreCheck:     func() { testAccPreCheck(t) },
		Providers:    testAccProviders,
		CheckDestroy: testAccCheckPetDestroy(pet),
		Steps: []resource.TestStep{
			{
				Config: testAccCheckSumologicPetConfigImported(testName, testTag),
			},
			{
				ResourceName:      "sumologic_pet.foo",
				ImportState:       true,
				ImportStateVerify: true,
			},
		},
	})
}

func TestAccPet_create(t *testing.T) {
	var pet Pet
	testName := "Rupert"
	testTag := "bear"
	resource.Test(t, resource.TestCase{
		PreCheck:     func() { testAccPreCheck(t) },
		Providers:    testAccProviders,
		CheckDestroy: testAccCheckPetDestroy(pet),
		Steps: []resource.TestStep{
			{
				Config: testAccSumologicPet(testName, testTag),
				Check: resource.ComposeTestCheckFunc(
					testAccCheckPetExists("sumologic_pet.test", &pet, t),
					testAccCheckPetAttributes("sumologic_pet.test"),
					resource.TestCheckResourceAttr("sumologic_pet.test", "name", testName),
					resource.TestCheckResourceAttr("sumologic_pet.test", "tag", testTag),
				),
			},
		},
	})
}

func testAccCheckPetDestroy(pet Pet) resource.TestCheckFunc {
	return func(s *terraform.State) error {
		client := testAccProvider.Meta().(*Client)
		for _, r := range s.RootModule().Resources {
			id := r.Primary.ID
			u, err := client.GetPet(id)
			if err != nil {
				return fmt.Errorf("Encountered an error: " + err.Error())
			}
			if u != nil {
				return fmt.Errorf("Pet still exists")
			}
		}
		return nil
	}
}

func testAccCheckPetExists(name string, pet *Pet, t *testing.T) resource.TestCheckFunc {
	return func(s *terraform.State) error {
		rs, ok := s.RootModule().Resources[name]
		if !ok {
			//need this so that we don't get an unused import error for strconv in some cases
			return fmt.Errorf("Error = %s. Pet not found: %s", strconv.FormatBool(ok), name)
		}

		//need this so that we don't get an unused import error for strings in some cases
		if strings.EqualFold(rs.Primary.ID, "") {
			return fmt.Errorf("Pet ID is not set")
		}

		id := rs.Primary.ID
		c := testAccProvider.Meta().(*Client)
		newPet, err := c.GetPet(id)
		if err != nil {
			return fmt.Errorf("Pet %s not found", id)
		}
		pet = newPet
		return nil
	}
}

func TestAccPet_update(t *testing.T) {
	var pet Pet
	testName := "Rupert"
	testTag := "bear"

	testUpdatedName := "RupertUpdate"
	testUpdatedTag := "bearUpdate"

	resource.Test(t, resource.TestCase{
		PreCheck:     func() { testAccPreCheck(t) },
		Providers:    testAccProviders,
		CheckDestroy: testAccCheckPetDestroy(pet),
		Steps: []resource.TestStep{
			{
				Config: testAccSumologicPet(testName, testTag),
				Check: resource.ComposeTestCheckFunc(
					testAccCheckPetExists("sumologic_pet.test", &pet, t),
					testAccCheckPetAttributes("sumologic_pet.test"),
					resource.TestCheckResourceAttr("sumologic_pet.test", "name", testName),
					resource.TestCheckResourceAttr("sumologic_pet.test", "tag", testTag),
				),
			},
			{
				Config: testAccSumologicPetUpdate(testUpdatedName, testUpdatedTag),
				Check: resource.ComposeTestCheckFunc(
					resource.TestCheckResourceAttr("sumologic_pet.test", "name", testUpdatedName),
					resource.TestCheckResourceAttr("sumologic_pet.test", "tag", testUpdatedTag),
				),
			},
		},
	})
}

func testAccCheckSumologicPetConfigImported(name string, tag string) string {
	return fmt.Sprintf(`
        resource "sumologic_pet" "foo" {
            name = "%s"
            tag = "%s"
        }
        `, name, tag)
}

func testAccSumologicPet(name string, tag string) string {
	return fmt.Sprintf(`
        resource "sumologic_pet" "test" {
            name = "%s"
            tag = "%s"
        }
        `, name, tag)
}

func testAccSumologicPetUpdate(name string, tag string) string {
	return fmt.Sprintf(`
        resource "sumologic_pet" "test" {
            name = "%s"
            tag = "%s"
        }
        `, name, tag)
}

func testAccCheckPetAttributes(name string) resource.TestCheckFunc {
	return func(s *terraform.State) error {
		f := resource.ComposeTestCheckFunc(
			resource.TestCheckResourceAttrSet(name, "name"),
			resource.TestCheckResourceAttrSet(name, "tag"),
		)
		return f(s)
	}
}
